 How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It dramatically reduced the amount of text to look through and made it much faster.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It enables quick copy / pasting old code, seeing how the file evolved (maybe got too complex) and enable quickly going back to a prior state without the need to keep lots of versions as physical files.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The pros are that this is customisable and flexible and can fit your own workflow. It enables you to make intelligent commits that serve logical purposes. And keeps all the versions functional - if you so choose. The cons are that you might forget to commit, or only remember to do so when it's too late, so intermediate changes are no longer visible.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because GIT was made for coding, which involves many files that interrelate, while Google Docs works mostly with single documents.

How can you use the commands git log and git diff to view the history of files?

    Using git log, you can show the different commits and comments as to what changed. GIT DIFF enables comparing two commits for changes, and adding --stat gives you an overview of the magnitude of the changes.

How might using version control make you more confident to make changes that
could break something?

    You can easily revert to prior versions that you know are functional, because they have a proper description, and navigate prior and later versions easily.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use it to learn to develop apps. And possibly also for creative writing.